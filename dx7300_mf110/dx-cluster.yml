---
type: install
version: 1.5
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-dem-mf-7300
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that manages
    your entire digital ecosystem to innovate and deliver great customer experiences,
    foster internal collaboration and support dynamic business needs for sustainable
    growth.
baseUrl: https://raw.githubusercontent.com/Jahia/jelastic-package-dev/master/dx7300_mf110
globals:
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  mngr_pass: ${settings.toolspwd}
  su_pass: ${settings.rootpwd}
  dx_version: 7.3.0.0
  package_type: dev
  xms: 2G
  java_opts:
    -DDB_USER=${DB_USER}
    -DDB_PASSWORD=${DB_PASSWORD}
    -DREDIS_PASSWORD=${REDIS_PASSWORD}
    -DMANAGER_USER=${MANAGER_USER}
    -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
    -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
    -DHOST_NAME=$(hostname)
    -XX:MaxPermSize=512m
  
 
ssl: true
skipNodeEmails: true
nodes:  
  - image: jahiadev/browsing:7.3.0.0
    displayName: Browsing
    count: ${settings.browsingCount}
    cloudlets: 32
    nodeGroup: cp
    links: sqldb:mysqldb
    startServiceOnCreation: false
    env: 
      DB_USER: ${globals.db_user}
      DB_PASSWORD: ${globals.db_pass}
      MANAGER_USER: ${globals.mngr_user}
      MANAGER_PASSWORD: ${globals.mngr_pass}
      SUPER_USER_PASSWORD: ${globals.su_pass}
      REDIS_PASSWORD: ${globals.redis_pass}
      XMS: ${globals.xms}
      _JAVA_OPTIONS: ${globals.java_opts}
      DATADOGAPIKEY: ${settings.ddogApikey}
      JAHIA_OPERATING_MODE: production
#    TO BE PUT BACK WHEN THE AUTOMATED UPGRADE STOP LOOKING FOR THE PROCESSING'S GENERATED RESOURCE FOLDER      
#    volumes:
#      - /data/digital-factory-data/generated-resources
#    volumeMounts: 
#      /data/digital-factory-data/generated-resources:
#        sourceNodeGroup: proc
    
  - image: jahiadev/processing:7.3.0.0
    displayName: Processing
    count: 1
    cloudlets: 32
    nodeGroup: proc
    links: 
      - sqldb:mysqldb
      - nosqldb:redis
    startServiceOnCreation: false
    env: 
      DB_USER: ${globals.db_user}
      DB_PASSWORD: ${globals.db_pass}
      MANAGER_USER: ${globals.mngr_user}
      MANAGER_PASSWORD: ${globals.mngr_pass}
      SUPER_USER_PASSWORD: ${globals.su_pass}
      REDIS_PASSWORD: ${globals.redis_pass}
      XMS: ${globals.xms}
      _JAVA_OPTIONS: ${globals.java_opts}
      DATADOGAPIKEY: ${settings.ddogApikey}
      DX_VERSION: ${globals.dx_version}
      PACKAGE_TYPE: ${globals.package_type}
      JAHIA_OPERATING_MODE: production

  - nodeType: mariadb-dockerized
    tag: 10.2.12 # 10.3.9
    displayName: MariaDB
    count: 1
    cloudlets: 32
    nodeGroup: sqldb    
    env:
      DATADOGAPIKEY: ${settings.ddogApikey}

  - image: jahiadev/unomi:1.3.2-jdk-1.8.0_144
    displayName: Unomi
    count: 2
    cloudlets: 64
    nodeGroup: unomi
    links: es:es
    startServiceOnCreation: false

  - image: jahiadev/elasticsearch:5.6.3-jdk-1.8.0_144
    displayName: Elastic Search
    count: 1
    cloudlets: 64
    nodeGroup: es

    
# --Events --

onInstall: 
  - environment.control.ApplyNodeGroupData [proc]:
      data: 
        dxVersion: 7.3.0.0
        packageType: dev  
  - setupSqlDB
  - if (settings.skipStart != 'true'): createJahiaDatabase

  
  - copyApp: proc 
  - if (settings.skipStart != 'true'):
    - api: env.control.ExecDockerRunCmd
      nodeId: ${nodes.proc.first.id} 

  - sleep:
    - milliseconds: 120000
  
  - copyApp: cp
  - if (settings.skipStart != 'true'): 
    - forEach(nodes.cp):
        api: env.control.ExecDockerRunCmd
        nodeId: ${@i.id} 

  - setupUnomi


  - setupDatadogAgent: cp
  - setupDatadogAgent: proc
  - setupDatadogAgent: mysqldb

onAfterServiceScaleOut[cp]: 
  forEach(event.response.nodes): 
    - copyApp: ${@i.id}
        
onAfterRedeployContainer[cp]:
  - copyApp: cp

onAfterRedeployContainer[proc]:
  - copyApp: proc        
#-- Actions --
      
onBeforeServiceScaleOut[unomi]: updateHazelcast
onBeforeScaleIn[unomi]: updateHazelcast   
#-- Actions --

actions:
 
  appendNode:
    setGlobals: 
      - ids: ${globals.ids:}${globals.sep:}${this}
      - sep: ' '
         
  updateHazelcast:
    - forEach(nodes.unomi):
        appendNode: ${@i.id}
    
    - cmd[unomi]: |-
        sed -i "/<interface>/d" $HAZELCAST_CONFIG
        sed -i "/<member>node/d" $HAZELCAST_CONFIG
        ids=( ${globals.ids} )
        for i in "${ids[@]}"; do grep -q "node$i" $HAZELCAST_CONFIG || sed -i "/<tcp-ip/a \\\t\t\t\t<member>node$i</member>" $HAZELCAST_CONFIG ; done
       
  appendNode:
    setGlobals: 
      - ids: ${globals.ids:}${globals.sep:}${this}
      - sep: ' '
         
  setupUnomi:
    - updateHazelcast
    - forEach(nodes.unomi):
        api: env.control.ExecDockerRunCmd
        nodeId: ${@i.id}
    
  setupSqlDB:
    - cmd[sqldb]: |-
        service mysql stop
        wget -O /etc/my.cnf ${baseUrl}/configs/my.cnf
        service mysql start
        wget -O setupUser.sh ${baseUrl}/scripts/setupUser.sh
        bash setupUser.sh ${globals.db_user} ${globals.db_pass}
      user: root 
  createJahiaDatabase:
    - cmd[sqldb]: |-
        mysql -u${globals.db_user} -p${globals.db_pass} -e "CREATE DATABASE IF NOT EXISTS jahia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
      user: root
    - cmd[${nodes.proc.first.id}]: cat $DATA_PATH/digital-factory-data/db/sql/schema/mysql/*.sql | mysql -h mysqldb -u$DB_USER -p$DB_PASSWORD -f jahia

  copyApp:  
    - cmd[${this}]: |-
        [ "${this}" == "proc" ] && role="processing" || role="browsing" 
        rm -rf $STACK_PATH/webapps/*
        cp -rf $DATA_PATH/jahia/tomcat/webapps/* $STACK_PATH/webapps
        chown -R tomcat:tomcat $STACK_PATH/webapps
        
        cd /opt/tomcat/webapps/ROOT/WEB-INF/lib/
        mngr_pwd=$(/usr/java/latest/bin/jjs -cp ./jahia-commons-1.0.6.jar:./jasypt-1.9.1-lite.jar -scripting <<< "print(org.jahia.commons.encryption.EncryptionUtils.pbkdf2Digest(\$ENV.MANAGER_PASSWORD, \"p\"))")
        sed -i "s|^jahiaToolManagerPassword .*$|jahiaToolManagerPassword                               = $mngr_pwd|" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        sed -i "s#\${HOST_NAME}#$HOSTNAME#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties

        echo $SUPER_USER_PASSWORD > $DATA_PATH/digital-factory-data/root.pwd
        chown -R tomcat:tomcat $DATA_PATH/digital-factory-data/root.pwd
        
  setupDatadogAgent:
    - if (settings.ddog == 'datadog'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |- 
            DD_API_KEY=${settings.ddogApikey} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            wget -O /etc/datadog-agent/conf.d/tomcat.d/conf.yaml ${baseUrl}/conf.yaml
            chmod 555 /opt/tomcat/logs/catalina.out -R
            systemctl restart datadog-agent
        
success: /text/success.md
settings:
  fields: 
  - name: rootpwd
    type: string
    caption: Jahia DX root password
    vtype: text
    required: true
  - name: browsingCount
    type: string
    caption: Number of DX browsing nodes
    vtype: text
    required: true
  - name: toolspwd
    type: string
    caption: Jahia tools password
    vtype: text
    required: true
  - name: ddog
    type: radio-fieldset
    values:
      no-datadog: No monitoring
      datadog: Autoregister in Datadog
    default: no-datadog
    showIf:
      datadog:
        - name: ddogApikey
          type: string
          caption: Datadog API KEY
          default: 8f0af047f681f99d4d9f98e28b1d2092
          required: true
          vtype: text
        
success: /text/success.md